[package]
name = "learning-tower-hyper-reqwest"
version = "0.1.0"
edition = "2024"

[dependencies]
tokio = { version = "1", features = ["full"] }
hyper = { version = "1.6", features = ["full"] }
tower = { version = "0.5", features = ["retry"] }
tower-http = { version = "0.6", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt"] }
tracing-opentelemetry = "0.30"

#opentelemetry = { version = "0.2", features = ["full"] }
opentelemetry = { version = "0.29" }

opentelemetry_sdk = { version = "0.29.0" }
opentelemetry-otlp = { version = "0.29.0", features = [
    "tonic",
    "grpc-tonic",
    "metrics",
] }
opentelemetry-stdout = { version = "0.29.0" }

# 已经不需要了，使用OTLP(opentelemetry-otlp)协议与Prometheus进行通信,
# Prometheus支持OTLP协议
#opentelemetry-prometheus = "0.29"

# 暂时不需要了，使用OTLP(opentelemetry-otlp)协议与Jaeger进行通信,
# 不使用Jaeger的Rust SDK与Jaeger原生协议通信
#opentelemetry-jaeger = "0.22"
futures = "0.3"
http = "1.3"
http-body = { version = "1.0.0" }
http-body-util = { version = "0.1.0" }
pin-project-lite = "0.2"
hyper-util = { version = "0.1.11", features = ["tokio", "service"] }
serde = { version = "1.0.219", features = ["derive"] }
axum = "0.8.3"
bytes = "1"

utoipa = { version = "5.3.1", features = [
    "axum_extras",
    "chrono",
] } # 用于生成OpenAPI规范
utoipa-swagger-ui = { version = "9.0.1", features = ["axum"] } # 用于提供Swagger UI

redis = { version = "0.29.5", features = ["tokio-comp"] }
sqlx = { version = "0.8.4", features = ["runtime-tokio", "postgres", "chrono"] }

dotenvy = "0.15.7"
thiserror = "2.0.12"
chrono = { version = "0.4.40", features = ["serde"] }
serde_json = "1.0.140"

[features]
default = ["service-axum", "middleware-tower"]
# service组，只能开启一个
# 启用axum service
service-axum = []
# 启用hyper+tower原生service
service-my = []

# middleware组，只能开启一个
# 启用axum可用的middleware
middleware-axum = []
# 启用自己编写的hyper tower service可用middleware
middleware-my = []
# 启用通用的标准tower middleware
middleware-tower = []
